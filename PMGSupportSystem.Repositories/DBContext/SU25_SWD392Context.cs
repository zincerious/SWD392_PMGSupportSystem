// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using PMGSupportSystem.Repositories.Models;
using System;
using System.Collections.Generic;

namespace PMGSupportSystem.Repositories.DBContext;

public partial class SU25_SWD392Context : DbContext
{
    public SU25_SWD392Context()
    {
    }

    public SU25_SWD392Context(DbContextOptions<SU25_SWD392Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<GradeRound> GradeRounds { get; set; }

    public virtual DbSet<RegradeRequest> RegradeRequests { get; set; }

    public virtual DbSet<Submission> Submissions { get; set; }

    public virtual DbSet<SubmissionDistribution> SubmissionDistributions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=ZINCERIOUS;Initial Catalog=SU25_SWD392;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.ExamId).HasName("PK__Exam__A56D125FFF08EBD4");

            entity.ToTable("Exam");

            entity.Property(e => e.ExamId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("examId");
            entity.Property(e => e.BaremFile)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("baremFile");
            entity.Property(e => e.FilePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("filePath");
            entity.Property(e => e.Semester)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("semester");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UploadBy).HasColumnName("uploadBy");
            entity.Property(e => e.UploadedAt)
                .HasColumnType("datetime")
                .HasColumnName("uploadedAt");

            entity.HasOne(d => d.UploadByNavigation).WithMany(p => p.Exams)
                .HasForeignKey(d => d.UploadBy)
                .HasConstraintName("FK__Exam__uploadBy__3C69FB99");
        });

        modelBuilder.Entity<GradeRound>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GradeRou__3213E83F5120509B");

            entity.ToTable("GradeRound");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("id");
            entity.Property(e => e.CoLecturerId).HasColumnName("coLecturerId");
            entity.Property(e => e.GradeAt)
                .HasColumnType("datetime")
                .HasColumnName("gradeAt");
            entity.Property(e => e.LecturerId).HasColumnName("lecturerId");
            entity.Property(e => e.MeetingUrl).HasMaxLength(255).IsUnicode(false).HasColumnName("meetingUrl");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.RoundNumber).HasColumnName("roundNumber");
            entity.Property(e => e.ScheduleAt)
                .HasColumnType("datetime")
                .HasColumnName("scheduleAt");
            entity.Property(e => e.Score)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("score");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SubmissionId).HasColumnName("submissionId");

            entity.HasOne(d => d.CoLecturer).WithMany(p => p.GradeRoundCoLecturers)
                .HasForeignKey(d => d.CoLecturerId)
                .HasConstraintName("FK__GradeRoun__coLec__47DBAE45");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.GradeRoundLecturers)
                .HasForeignKey(d => d.LecturerId)
                .HasConstraintName("FK__GradeRoun__lectu__46E78A0C");

            entity.HasOne(d => d.Submission).WithMany(p => p.GradeRounds)
                .HasForeignKey(d => d.SubmissionId)
                .HasConstraintName("FK__GradeRoun__submi__45F365D3");
        });

        modelBuilder.Entity<RegradeRequest>(entity =>
        {
            entity.HasKey(e => e.RegradeRequestId).HasName("PK__RegradeR__BBA2545BDC065B1B");

            entity.ToTable("RegradeRequest");

            entity.Property(e => e.RegradeRequestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("regradeRequestId");
            entity.Property(e => e.ExaminerId).HasColumnName("examinerId");
            entity.Property(e => e.RequestAt)
                .HasColumnType("datetime")
                .HasColumnName("requestAt");
            entity.Property(e => e.RequestRound).HasColumnName("requestRound");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.StudentId).HasColumnName("studentId");
            entity.Property(e => e.SubmissionId).HasColumnName("submissionId");
            entity.Property(e => e.UpdatedBy).HasColumnName("updatedBy");
            entity.Property(e => e.Reason).HasColumnName("Reason");

            entity.HasOne(d => d.Examiner).WithMany(p => p.RegradeRequestExaminers)
                .HasForeignKey(d => d.ExaminerId)
                .HasConstraintName("FK__RegradeRe__exami__4E88ABD4");

            entity.HasOne(d => d.Student).WithMany(p => p.RegradeRequestStudents)
                .HasForeignKey(d => d.StudentId)
                .HasConstraintName("FK__RegradeRe__stude__4CA06362");

            entity.HasOne(d => d.Submission).WithMany(p => p.RegradeRequests)
                .HasForeignKey(d => d.SubmissionId)
                .HasConstraintName("FK__RegradeRe__submi__4BAC3F29");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.RegradeRequestUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__RegradeRe__updat__4D94879B");
        });

        modelBuilder.Entity<Submission>(entity =>
        {
            entity.HasKey(e => e.SubmissionId).HasName("PK__Submissi__B1DEEF52AD5C8F5E");

            entity.ToTable("Submission");

            entity.Property(e => e.SubmissionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("submissionId");
            entity.Property(e => e.AiScore)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("aiScore");
            entity.Property(e => e.ExamId).HasColumnName("examId");
            entity.Property(e => e.FilePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("filePath");
            entity.Property(e => e.FinalScore)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("finalScore");
            entity.Property(e => e.PublishedBy).HasColumnName("publishedBy");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.StudentId).HasColumnName("studentId");
            entity.Property(e => e.SubmittedAt)
                .HasColumnType("datetime")
                .HasColumnName("submittedAt");

            entity.HasOne(d => d.Exam).WithMany(p => p.Submissions)
                .HasForeignKey(d => d.ExamId)
                .HasConstraintName("FK__Submissio__examI__403A8C7D");

            entity.HasOne(d => d.PublishedByNavigation).WithMany(p => p.SubmissionPublishedByNavigations)
                .HasForeignKey(d => d.PublishedBy)
                .HasConstraintName("FK__Submissio__publi__4222D4EF");

            entity.HasOne(d => d.Student).WithMany(p => p.SubmissionStudents)
                .HasForeignKey(d => d.StudentId)
                .HasConstraintName("FK__Submissio__stude__412EB0B6");
        });

        modelBuilder.Entity<SubmissionDistribution>(entity =>
        {
            entity.HasKey(e => e.ExamDistributionId).HasName("PK__Submissi__F9532444D6B69C08");

            entity.ToTable("SubmissionDistribution");

            entity.Property(e => e.ExamDistributionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("examDistributionId");
            entity.Property(e => e.AssignedAt)
                .HasColumnType("datetime")
                .HasColumnName("assignedAt");
            entity.Property(e => e.Deadline)
                .HasColumnType("datetime")
                .HasColumnName("deadline");
            entity.Property(e => e.LecturerId).HasColumnName("lecturerId");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubmissionId).HasColumnName("submissionId");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.SubmissionDistributions)
                .HasForeignKey(d => d.LecturerId)
                .HasConstraintName("FK__Submissio__lectu__534D60F1");

            entity.HasOne(d => d.Submission).WithMany(p => p.SubmissionDistributions)
                .HasForeignKey(d => d.SubmissionId)
                .HasConstraintName("FK__Submissio__submi__52593CB8");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3213E83FA4F25A3A");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__AB6E6164EFBCD22E").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fullName");
            entity.Property(e => e.GoogleId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("googleId");
            entity.Property(e => e.Role)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}